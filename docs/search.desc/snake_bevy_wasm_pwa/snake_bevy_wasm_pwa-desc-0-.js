searchState.loadedDescShard("snake_bevy_wasm_pwa", 0, "snake_bevy_wasm_pwa\nLibraryError must be accessible in every module. all …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis module is like a main.rs module for a binary CLI …\nTo start the Wasm application, wasm_bindgen runs this …\nget args from hash fragment\nrender header with Home and Help\nThis module is like a lib.rs module for a binary CLI …\nentry point just like for cli-bin-executable\nthe listener calls this function\nthe listener calls this function\nrender first page\nprint my name\nprint help\nrouting by arguments routing can come from:\nprint my name upper, can return error\nall possible library errors for <code>thiserror</code>\nAll the real code (program logic) is inside modules in …\nHelper functions for web_sys, window, document, dom, …\nformat the hello phrase\nformat the hello phrase with uppercase name if it is …\nreturn uppercase\nadd event listener for onhashchange\nadd event listener for button\nget element by id\nget html element by id\nget input element value string by id\nhtml_source_code_mod.rs\nWasm must read time from javascript.\nopen URL in same tab (PWA don’t have tabs, only one …\nset inner text\nreturn the global window object\nHtmlSourceCode - type to manipulate HTML source code safer …\nReturns the argument unchanged.\nget the well formed html We trust the programmer to …\nInjects the HTMLSourceCode into a DOM element. We trust …\nCalls <code>U::from(self)</code>.\nThe programmer provides a &amp;’static str to initiate …\nThe attribute value must be double_quoted. We trust the …\nWe expect the HtmlSourceCode to be well formed. For that …\nThis must be pure text, no html element are allowed for …")